trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  webRepository: 'web'
  tag: '$(Build.BuildId)'

stages:
# - stage: 'Build'
#   displayName: 'Build the web application'
#   jobs: 
#   - job: 'Build'
#     displayName: 'Build job'
#     pool:
#       vmImage: 'ubuntu-20.04'
#       demands:
#       - npm

#     variables:
#       wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
#       dotnetSdkVersion: '6.x'

#     steps:
#     - task: UseDotNet@2
#       displayName: 'Use .NET SDK $(dotnetSdkVersion)'
#       inputs:
#         version: '$(dotnetSdkVersion)'

#     - task: Npm@1
#       displayName: 'Run npm install'
#       inputs:
#         verbose: false

#     - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
#       displayName: 'Compile Sass assets'

#     - task: gulp@1
#       displayName: 'Run gulp tasks'

#     - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
#       displayName: 'Write build info'
#       workingDirectory: $(wwwrootDir)

#     - task: DotNetCoreCLI@2
#       displayName: 'Restore project dependencies'
#       inputs:
#         command: 'restore'
#         projects: '**/*.csproj'

#     - task: DotNetCoreCLI@2
#       displayName: 'Build the project - $(buildConfiguration)'
#       inputs:
#         command: 'build'
#         arguments: '--no-restore --configuration $(buildConfiguration)'
#         projects: '**/*.csproj'

#     - task: DotNetCoreCLI@2
#       displayName: 'Publish the project - $(buildConfiguration)'
#       inputs:
#         command: 'publish'
#         projects: '**/*.csproj'
#         publishWebProjects: false
#         arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
#         zipAfterPublish: true

#     - publish: '$(Build.ArtifactStagingDirectory)'
#       artifact: drop

# Use docker tasks for "Build" stage:
# - command: specifies the Docker command to run.
# - buildContext: specifies the path to the build context.
# - repository: specifies the name of the repository.
# - dockerfile: specifies the path to the Dockerfile.
# - containerRegistry: specifies the name of the Docker registry service connection.
# - tags: Specifies a list of tags on separate lines. These tags are used in build, push and buildAndPush commands.

- stage: 'Build'
  displayName: 'Build and push'
  jobs:  
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: Docker@2
      displayName: 'Build and push the image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(webRepository)
        dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/Dockerfile'
        containerRegistry: 'Container Registry Connection'
        tags: |
          $(tag)


# Use Docker task for "Deploy" stage to Azure Web App
# - appName: specifies the name of an existing Azure App Service.
# - azureSubscription: specifies the name of the Azure Resource Manager subscription for the deployment.
# - imageName: specifies the fully qualified container image name. For example, myregistry.azurecr.io/nginx:latest or python:3.7.2-alpine/.

- stage: 'Deploy'
  displayName: 'Deploy the container'
  dependsOn: Build
  jobs:
  - job: 'Deploy'
    displayName: 'Deploy job'
    pool:
      vmImage: 'ubuntu-20.04'
    variables:
    - group: Release
    steps:
    - task: AzureWebAppContainer@1
      inputs:
       appName: $(WebAppName)
       azureSubscription: 'Resource Manager - Tailspin - Space Game' # set in Pipeline settings in Service config
       imageName: $(RegistryName)/$(webRepository):$(build.buildId)